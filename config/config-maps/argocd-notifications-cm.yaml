---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
data:
  service.webhook.github: |
    url: https://api.github.com
    headers:
      - name: Accept
        value: application/vnd.github+json
      - name: Authorization
        value: Bearer $github-token
      - name: X-GitHub-Api-Version
        value: 2022-11-28

  template.github-deployment-status: |
    webhook:
      github:
        method: POST
        # TODO: this url does not exist. Check with github if this is reasonable, otherwise use a github app to do this
        path: /repos/{{ call .repo.FullNameByRepoURL .app.spec.source.repoURL }}/deployments/ref/{{ .app.metadata.annotations.github.com/branch }}/statuses
        body: |
          {
            {{ if eq .app.status.operationState.phase "Running" }} "state": "in_progress" {{ end }}
            {{ if eq .app.status.operationState.phase "Succeeded" }} "state": "success" {{ end }}
            {{ if eq .app.status.operationState.phase "Error" }} "state": "error" {{ end }}
            {{ if eq .app.status.operationState.phase "Failed" }} "state": "failure" {{ end }},

            {{ if eq .app.metadata.annotations.github.com/environment "preview" }} "environment_url": "https://{{ .app.metadata.annotations.github.com/branch-slug }}.sandbox.acme.com" {{ end }}
            {{ if eq .app.metadata.annotations.github.com/environment "sandbox" }} "environment_url": "https://sandbox.acme.com" {{ end }}
            {{ if eq .app.metadata.annotations.github.com/environment "production" }} "environment_url": "https://acme.com" {{ end }},

            "owner": "{{ .app.metadata.annotations.github.com/owner }}",
            "repo": "{{ .app.metadata.annotations.github.com/repo }}",
            # "deployment_id": "",
            "environment": "{{ .app.metadata.annotations.github.com/environment }}",
            "log_url": "{{ .context.argocdUrl }}/applications/{{ .app.metadata.name }}",
            "description": "ArgoCD status updated",
          }

  trigger.sync-operation-change: |
    - when: app.status.operationState != nil and app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
      oncePer: app.status.sync.revision
      send:
        - github-deployment-status
    - when: app.status.operationState != nil and app.status.operationState.phase in ['Running']
      oncePer: app.status.sync.revision
      send:
        - github-deployment-status
    - when: app.status.operationState != nil and app.status.operationState.phase in ['Error', 'Failed']
      oncePer: app.status.sync.revision
      send:
        - github-deployment-status
