---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
data:
  service.webhook.github: |
    url: "https://api.github.com"
    headers:
      - name: Accept
        value: "application/vnd.github+json"
      - name: Authorization
        valueFrom:
          secretKeyRef:
            name: github-token
            key: token
      - name: X-GitHub-Api-Version
        value: 2022-11-28

  template.github-deployment-status: |
    webhook:
      github:
        method: POST
        path: "/repos/{{ call .repo.FullNameByRepoURL .app.spec.source.repoURL }}/dispatches"
        body: |
          {
            "event_type": "sync-deployment-status",
            "client_payload": {
              "state": {{ if eq .app.status.operationState.phase "Running" }}"in_progress"{{ else if eq .app.status.operationState.phase "Succeeded" }}"success"{{ else if eq .app.status.operationState.phase "Error" }}"error"{{ else }}"failure"{{ end }},
              "environment_url": {{ if eq .app.metadata.annotations["github.com/environment"] "preview" }}"https://{{ .app.metadata.annotations['github.com/branch-slug'] }}.sandbox.acme.com"{{ else if eq .app.metadata.annotations['github.com/environment'] "sandbox" }}"https://sandbox.acme.com"{{ else }}"https://acme.com"{{ end }},
              "ref": "{{ .app.metadata.annotations['github.com/ref'] }}",
              "environment": "{{ .app.metadata.annotations['github.com/environment'] }}",
              "log_url": "{{ .context.argocdUrl }}/applications/{{ .app.metadata.name }}"
            }
          }

  trigger.sync-operation-change: |
    - when: app.status.operationState != nil and app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
      oncePer: app.status.sync.revision
      send:
        - github-deployment-status
    - when: app.status.operationState != nil and app.status.operationState.phase in ['Running']
      oncePer: app.status.sync.revision
      send:
        - github-deployment-status
    - when: app.status.operationState != nil and app.status.operationState.phase in ['Error', 'Failed']
      oncePer: app.status.sync.revision
      send:
        - github-deployment-status
